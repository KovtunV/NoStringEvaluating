using System.Globalization;
using NoStringEvaluating.Tests.Models;
using static NoStringEvaluating.Tests.Helpers.FormulaModelFactory;

namespace NoStringEvaluating.Tests.Data;

internal static class EvaluateNumber
{
    public static IEnumerable<FormulaModel> Get()
    {
        var date1 = DateTime.Parse("02/12/2002 14:18:23", CultureInfo.InvariantCulture);
        var date2 = DateTime.Parse("07/18/2005 18:30:10", CultureInfo.InvariantCulture);
        var time1 = DateTime.Parse("01/01/2000 14:18:23", CultureInfo.InvariantCulture);
        var time2 = DateTime.Parse("01/01/2000 18:30:10", CultureInfo.InvariantCulture);
        var wordList1 = new[] { "one", "tWo" }.ToList();
        var wordList2 = new[] { "a", "b", "c", "a", "c" }.ToList();
        var numberList1 = new[] { 1d, 3d, 2d }.ToList();
        var numberList2 = new[] { 1d, 3d, 2d, 14d }.ToList();

        yield return CreateTestModel("5 + 6 * 13 / 2", 44);
        yield return CreateTestModel("256 / 32 / 4 * 2 + (256.346 / (32 / 4 * 2) + 256 / (32 / 4))", 52.022);
        yield return CreateTestModel("(5)", 5);
        yield return CreateTestModel("(5+6)", 11);
        yield return CreateTestModel("256 / 32 / 4 * 2 + (256.346 / (32 / 4 * 2) + 256 / (32 / 4)) * 2^4", 772.346);
        yield return CreateTestModel("5 + aDd(78+6; 5; 6; 77+5) / 17", 15.412);
        yield return CreateTestModel("add(ADD(5*3; 6))", 21);
        yield return CreateTestModel("78 + if(true; [my variable] * 9 /1; 1 - 3)", 789, ("my variable", 79));
        yield return CreateTestModel("add(add(5) - 3)", 2);
        yield return CreateTestModel("add(Add(5) - add(5))", 0);
        yield return CreateTestModel("add(add(5; 1) - add(5; 2; 3))", -4);
        yield return CreateTestModel("add(add(5); add(5); if(and(true; false); 1; 0))", 10);
        yield return CreateTestModel("if([my variable]; add(56 + 9 / 12 * 123.596; 1; 45;5); 9) *     24 + 52 -33", 4811.728, ("my variable", true));
        yield return CreateTestModel("IfNull(thisisnull;3)", 3);
        yield return CreateTestModel("IfNull(4;3)", 4);
        yield return CreateTestModel("2", 2);
        yield return CreateTestModel("add(5; 6; 9)", 20);
        yield return CreateTestModel("kov(1; 2; 3) - kovt(8; 9)", 7);
        yield return CreateTestModel("1/6 + 5/12 + 3/4 * 1/6 + 5/12 + 3/4 - 1/6 + 5/12 + 3/4- 78", -75.125);
        yield return CreateTestModel("(45^6 + (12 - (34*896^2) / 325) / 80000000) / 7^13 + 1.2", 1.286);
        yield return CreateTestModel(
            "mean ([super power war]; 6; 6; 8; add(78;89;6;5;4;2;1;5;8;789;56;6;6)*7; 5; 2; 4; 87; 7; 89; 5; 4; 52; 3; 5; 4; 8; 78; 5; 4; 2; 3)",
            357.739,
            ("super power war", 456));
        yield return CreateTestModel(
            "[Provider(\"My test provider\").Month(-1).Price] * [Consumer(\"My test consumer\").Month().Volume]",
            48,
            ("Provider(\"My test provider\").Month(-1).Price", 6),
            ("Consumer(\"My test consumer\").Month().Volume", 8));
        yield return CreateTestModel("if([var1] > 5 || [var1] != [var2]; 56+3; 1-344)", 59, ("var1", 5), ("var2", 6));
        yield return CreateTestModel("if([var1] >= 5 && [var1] + 10 == 15; 1; 0)", 1, ("var1", 5));
        yield return CreateTestModel("if(and(true; true; true) && [var1] < 5; 1; 0)", 0, ("var1", 5));
        yield return CreateTestModel("(5*3)-1", 14);
        yield return CreateTestModel("5*3-1", 14);
        yield return CreateTestModel("5*(3-1)", 10);
        yield return CreateTestModel("if(true; -6; -7)", -6);
        yield return CreateTestModel("5 - -6", 11);
        yield return CreateTestModel("if ([Arg1] > 0; - [Arg1]; 0)", -16, ("Arg1", 16));
        yield return CreateTestModel("if ([Arg1] != 0; -----Arg1; 0)", -16, ("Arg1", 16));
        yield return CreateTestModel("-(5+6)", -11);
        yield return CreateTestModel("- add(1;3) - add(1; 2; 3)", -10);
        yield return CreateTestModel("if(5 > 0; -(5+6); 0)", -11);
        yield return CreateTestModel("-(9 - 7 + -(5 + 3))", 6);
        yield return CreateTestModel("-((5 + 6) * -(9 - 7 - (5 + 3))) * -((5 + 6) * -(9 - 7 - (5 + 3)))", 4356);
        yield return CreateTestModel("5 * -add(1; 3) * -[Arg1] / -(-add(1; 3) *3)", 1480, ("Arg1", 888));
        yield return CreateTestModel("5 * -add(1;3) * - 88 / -(-add(1; 16; 23; -(7+12)) *3)", 27.937);
        yield return CreateTestModel("-(5* -(5 / (6-7)+3))", -10);
        yield return CreateTestModel("-(5* -(5 * -(5+16) - (6-7 * -(5+16 * -(3+6)))+3))", 4325);
        yield return CreateTestModel("(5* -(5 * (5+16) - (6-7 * (5+16 * -(3+6)))+3))", 4355);
        yield return CreateTestModel("(5* -(5 * (5+16) - (6-7 * (5+16 * (3+6)))+3))", -5725);
        yield return CreateTestModel("(5* (5 * (5+16) - (6-7 * (5+16 * (3+6)))+3))", 5725);
        yield return CreateTestModel("1.56 *56.89 +8.3", 97.048);
        yield return CreateTestModel("1,56 *56,89 +8,3", 97.048);
        yield return CreateTestModel("add + [add] * add(1; 4)", 18, ("add", 3));
        yield return CreateTestModel("add * -add(1; 4)", -15, ("add", 3));
        yield return CreateTestModel("-add", -3, ("add", 3));
        yield return CreateTestModel("add", 3, ("add", 3));
        yield return CreateTestModel("add + add(add(5; add))", 11, ("add", 3));
        yield return CreateTestModel("- (my_name_is / 15)", -3, ("my_name_is", 45));
        yield return CreateTestModel("[myVariable ♥]", 30, ("myVariable ♥", 30));
        yield return CreateTestModel("Pi*pI/[PI] + -pI", 0);
        yield return CreateTestModel("if([tau] > 6 == true; 5+6; -9)", 11);
        yield return CreateTestModel("if(tAu > 6 == false; 5+6; -9)", -9);
        yield return CreateTestModel("e + [E]", Math.Round(Math.E + Math.E, 3));
        yield return CreateTestModel("ToDateTime('09/12/2002') - ToDateTime('09/7/2002')", 5);
        yield return CreateTestModel("abs(-89.7)", 89.7);
        yield return CreateTestModel("add(1; 2; 3; 7; -4)", 9);
        yield return CreateTestModel("ceil(1.6)", 2);
        yield return CreateTestModel("Fact(6)", 720);
        yield return CreateTestModel("Fib(16)", 987);
        yield return CreateTestModel("floor(1.6)", 1);
        yield return CreateTestModel("Gcd(56; 24; 6)", 2);
        yield return CreateTestModel("Lcm(12; 15; 10; 75)", 300);
        yield return CreateTestModel("Ln(12)", 2.485);
        yield return CreateTestModel("log10(100)", 2);
        yield return CreateTestModel("log2(2048)", 11);
        yield return CreateTestModel("log(2048; 2)", 11);
        yield return CreateTestModel("max(2048; 2; 897; 23000)", 23000);
        yield return CreateTestModel("mean(2048; 2; 897; 23000)", 6486.75);
        yield return CreateTestModel("min(2048; 2; 897; 23000 * -1)", -23000);
        yield return CreateTestModel("mod(5; 2)", 1);
        yield return CreateTestModel("multi(2048; 2; 897; 23000)", 84504576000);
        yield return CreateTestModel("sgn(5)", 1);
        yield return CreateTestModel("sgn(0)", 0);
        yield return CreateTestModel("sgn(-5)", -1);
        yield return CreateTestModel("sign(5)", 1);
        yield return CreateTestModel("sign(0)", 0);
        yield return CreateTestModel("sign(-5)", -1);
        yield return CreateTestModel("sqrt(169)", 13);
        yield return CreateTestModel("deg(-145.23)", -8321.066);
        yield return CreateTestModel("exp(-1)", 0.368);
        yield return CreateTestModel("rad(-145.23)", -2.535);
        yield return CreateTestModel("Arctan(-145.23)", -1.564);
        yield return CreateTestModel("Arctanh(0.23)", 0.234);
        yield return CreateTestModel("Arctg(0.23)", 0.226);
        yield return CreateTestModel("Arctgh(0.23)", 0.234);
        yield return CreateTestModel("Atan(0.23)", 0.226);
        yield return CreateTestModel("Atanh(0.23)", 0.234);
        yield return CreateTestModel("Atg(0.23)", 0.226);
        yield return CreateTestModel("Atgh(0.23)", 0.234);
        yield return CreateTestModel("tan(0.23)", 0.234);
        yield return CreateTestModel("tanh(0.23)", 0.226);
        yield return CreateTestModel("tg(0.23)", 0.234);
        yield return CreateTestModel("tgh(0.23)", 0.226);
        yield return CreateTestModel("arcsin(0.23)", 0.232);
        yield return CreateTestModel("arcsinh(0.23)", 0.228);
        yield return CreateTestModel("Arsin(0.23)", 0.232);
        yield return CreateTestModel("Arsinh(0.23)", 0.228);
        yield return CreateTestModel("Asin(0.23)", 0.232);
        yield return CreateTestModel("Asinh(0.23)", 0.228);
        yield return CreateTestModel("sin(1.23)", 0.942);
        yield return CreateTestModel("sinh(1.23)", 1.564);
        yield return CreateTestModel("Arcsec(12)", 1.487);
        yield return CreateTestModel("Arcsech(0.8)", 0.693);
        yield return CreateTestModel("Arsech(0.8)", 0.693);
        yield return CreateTestModel("Asech(0.8)", 0.693);
        yield return CreateTestModel("sec(0.8)", 1.435);
        yield return CreateTestModel("sech(0.8)", 0.748);
        yield return CreateTestModel("Acot(0.8)", 0.896);
        yield return CreateTestModel("Acoth(1.8)", 0.626);
        yield return CreateTestModel("Actan(0.8)", 0.896);
        yield return CreateTestModel("Actanh(1.8)", 0.626);
        yield return CreateTestModel("Actg(0.8)", 0.896);
        yield return CreateTestModel("Actgh(1.8)", 0.626);
        yield return CreateTestModel("Arccot(0.8)", 0.896);
        yield return CreateTestModel("Arccoth(1.8)", 0.626);
        yield return CreateTestModel("Arcctan(0.8)", 0.896);
        yield return CreateTestModel("Arcctanh(1.8)", 0.626);
        yield return CreateTestModel("Arcctg(0.8)", 0.896);
        yield return CreateTestModel("Arcctgh(1.8)", 0.626);
        yield return CreateTestModel("Cot(1.8)", -0.233);
        yield return CreateTestModel("Coth(1.8)", 1.056);
        yield return CreateTestModel("Ctan(1.8)", -0.233);
        yield return CreateTestModel("Ctanh(1.8)", 1.056);
        yield return CreateTestModel("Ctg(1.8)", -0.233);
        yield return CreateTestModel("Ctgh(1.8)", 1.056);
        yield return CreateTestModel("Acos(-0.8)", 2.498);
        yield return CreateTestModel("Acosh(18)", 3.583);
        yield return CreateTestModel("Arccos(-0.8)", 2.498);
        yield return CreateTestModel("Arccosh(18)", 3.583);
        yield return CreateTestModel("Arcos(-0.8)", 2.498);
        yield return CreateTestModel("Arcosh(18)", 3.583);
        yield return CreateTestModel("cos(18)", 0.66);
        yield return CreateTestModel("cosh(18)", 32829984.569);
        yield return CreateTestModel("Acosech(18)", 0.056);
        yield return CreateTestModel("Acsch(18)", 0.056);
        yield return CreateTestModel("Arccsch(18)", 0.056);
        yield return CreateTestModel("Arcosech(18)", 0.056);
        yield return CreateTestModel("Arcsch(18)", 0.056);
        yield return CreateTestModel("Cosec(18)", -1.332);
        yield return CreateTestModel("Cosech(3)", 0.1);
        yield return CreateTestModel("Csc(18)", -1.332);
        yield return CreateTestModel("Csch(3)", 0.1);
        yield return CreateTestModel("iff(3 < 0; 3; 3 > 0; 4)", 4);
        yield return CreateTestModel("if(3 < 0; 3; -1)", -1);
        yield return CreateTestModel("ToNumber('5')", 5);
        yield return CreateTestModel("ToNumber('ghj5')", double.NaN);
        yield return CreateTestModel("Len('my word')", 7);
        yield return CreateTestModel("Len('my' + 'ddd')", 5);
        yield return CreateTestModel("DateDif(date1; date2; 'Y')", 3, ("date1", date1), ("date2", date2));
        yield return CreateTestModel("DateDif(ToDateTime('12/02/2002'); ToDateTime('02/07/2005'); 'Y')", 2);
        yield return CreateTestModel("DateDif(date1; date2; 'M')", 41, ("date1", date1), ("date2", date2));
        yield return CreateTestModel("DateDif(date1; date2; 'D')", 1252, ("date1", date1), ("date2", date2));
        yield return CreateTestModel("Round(TimeDif(date1; date2; 'H'); 0)", 4, ("date1", time1), ("date2", time2));
        yield return CreateTestModel("Round(TimeDif(date1; date2; 'M'); 0)", 252, ("date1", time1), ("date2", time2));
        yield return CreateTestModel("Round(TimeDif(date1; date2; 'S'); 0)", 15107, ("date1", time1), ("date2", time2));
        yield return CreateTestModel("WeekDay(ToDateTime('04/18/2021'))", 1);
        yield return CreateTestModel("WeekDay(ToDateTime('04/19/2021'))", 2);
        yield return CreateTestModel("WeekDay(ToDateTime('04/20/2021'))", 3);
        yield return CreateTestModel("WeekDay(ToDateTime('04/21/2021'))", 4);
        yield return CreateTestModel("WeekDay(ToDateTime('04/22/2021'))", 5);
        yield return CreateTestModel("WeekDay(ToDateTime('04/23/2021'))", 6);
        yield return CreateTestModel("WeekDay(ToDateTime('04/24/2021'))", 7);
        yield return CreateTestModel("WeekDay(ToDateTime('04/25/2021'))", 1);
        yield return CreateTestModel("Count(list; '*')", 3, ("list", wordList1));
        yield return CreateTestModel("Count(list1; list2)", 7, ("list1", wordList1), ("list2", wordList2));
        yield return CreateTestModel("Count(1; 2)", 2);
        yield return CreateTestModel("Count(1; 'dd'; 2)", 3);
        yield return CreateTestModel("Count(1; 'dd'; 2; list)", 5, ("list", wordList1));
        yield return CreateTestModel("Count(1; 2; {1, 5, 6, 3, 7})", 7);
        yield return CreateTestModel("Count(1; 2; {'one' 'two' 'thrte'})", 5);
        yield return CreateTestModel("Count(list)", 3, ("list", numberList1));
        yield return CreateTestModel("Count(list; 1; 1)", 5, ("list", numberList1));
        yield return CreateTestModel("Count(8; 'j'; list; 1; 1)", 7, ("list", numberList1));
        yield return CreateTestModel("Add(list)", 6, ("list", numberList1));
        yield return CreateTestModel("Add(10; list)", 16, ("list", numberList1));
        yield return CreateTestModel("Add(10; list; 90)", 106, ("list", numberList1));
        yield return CreateTestModel("Add(list; list)", 12, ("list", numberList1));
        yield return CreateTestModel("Max(list)", 3, ("list", numberList1));
        yield return CreateTestModel("Max(list; 300)", 300, ("list", numberList1));
        yield return CreateTestModel("Max(2; 3; 4; 1; list)", 4, ("list", numberList1));
        yield return CreateTestModel("Max(2; 3; -4; 1; list; 2)", 3, ("list", numberList1));
        yield return CreateTestModel("Max(2; 3; -4; 1; list; 12)", 12, ("list", numberList1));
        yield return CreateTestModel("Max(2; 3; -4; 1; list1; 12; list2; 10)", 14, ("list1", numberList1), ("list2", numberList2));
        yield return CreateTestModel("Mean(list)", 2, ("list", numberList1));
        yield return CreateTestModel("Mean(2; 3; 4; 1; list)", 2.286, ("list", numberList1));
        yield return CreateTestModel("Mean(2; 3; -4; 1; list; 2)", 1.25, ("list", numberList1));
        yield return CreateTestModel("Mean(2; 3; -4; 1; list; 12)", 2.5, ("list", numberList1));
        yield return CreateTestModel("Mean(2; 3; -4; 1; list1; 12; list2; 10)", 3.846, ("list1", numberList1), ("list2", numberList2));
        yield return CreateTestModel("Min(list)", 1, ("list", numberList1));
        yield return CreateTestModel("Min(list; -17)", -17, ("list", numberList1));
        yield return CreateTestModel("Min(2; 3; 4; list)", 1, ("list", numberList1));
        yield return CreateTestModel("Min(2; 3; -4; list; 2)", -4, ("list", numberList1));
        yield return CreateTestModel("Min(2; 3; -4; 1; list; 12)", -4, ("list", numberList1));
        yield return CreateTestModel("Min(2; 3; -4; 1; list1; 12; list2; -10)", -10, ("list1", numberList1), ("list2", numberList2));
        yield return CreateTestModel("Multi(list; 3)", 18, ("list", numberList1));
        yield return CreateTestModel("Multi(10; list)", 60, ("list", numberList1));
        yield return CreateTestModel("Multi(10; list; 90)", 5400, ("list", numberList1));
        yield return CreateTestModel("Multi(list; list)", 36, ("list", numberList1));
        yield return CreateTestModel("Add(5,12; 3,03; 10,64)", 18.79);
        yield return CreateTestModel("Add(5,12, 3,03, 10,64)", 18.79);
        yield return CreateTestModel("Add(5.12, 3.03, 10.64)", 18.79);
        yield return CreateTestModel("Add(Add(Add(5, 0); Add(6)); 3)", 14);
        yield return CreateTestModel("2,7", 2.7);
        yield return CreateTestModel("4.2687556958921E-08", 0.000000042687556958921);
        yield return CreateTestModel("4.2687556958921E08", 426875569.58921);
        yield return CreateTestModel("-4.2687556958921E08", -426875569.58921);
        yield return CreateTestModel("abs(-4.2687556958921E08)", 426875569.58921);
        yield return CreateTestModel("E", 2.7182);
        yield return CreateTestModel("123 + E", 125.7182);
        yield return CreateTestModel("123 + -E", 120.2817);
    }
}
