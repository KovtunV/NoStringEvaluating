<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NoStringEvaluating</name>
    </assembly>
    <members>
        <member name="T:NoStringEvaluating.Contract.IFormulaCache">
            <summary>
            Parsed formula cache
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.IFormulaCache.GetFormulaNodes(System.String)">
            <summary>
            Return cached formula nodes
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Contract.IFormulaChecker">
            <summary>
            Syntax checker
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.IFormulaChecker.CheckSyntax(System.String)">
            <summary>
            Check syntax
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.IFormulaChecker.CheckSyntax(System.ReadOnlySpan{System.Char})">
            <summary>
            Check syntax
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Contract.IFormulaParser">
            <summary>
            Parser from string to object sequence
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Contract.IFormulaParser.FunctionsReader">
            <summary>
            Function reader
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.IFormulaParser.Parse(System.String)">
            <summary>
            Return parsed formula nodes
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.IFormulaParser.Parse(System.ReadOnlySpan{System.Char})">
            <summary>
            Return parsed formula nodes
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.IFormulaParser.ParseWithoutRpn(System.ReadOnlySpan{System.Char})">
            <summary>
            Return parsed formula nodes without RPN
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Contract.IFunctionReader">
            <summary>
            Function reader
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.IFunctionReader.AddFunction(NoStringEvaluating.Functions.Base.IFunction,System.Boolean)">
            <summary>
            Add function
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.NoStringFunctionException">if exists</exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.IFunctionReader.RemoveFunction(System.String)">
            <summary>
            Remove function
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.IFunctionReader.TryProceedFunction(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.BaseFormulaNode},System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Read function name
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Contract.INoStringEvaluator">
            <summary>
            Expression evaluator
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcNumber(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcNumber(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcNumber(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcNumber(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcNumber(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcNumber(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcWord(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcWord(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcWord(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcWord(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcWord(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcWord(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcDateTime(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcDateTime(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcDateTime(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcDateTime(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcDateTime(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcDateTime(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcWordList(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcWordList(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcWordList(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcWordList(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcWordList(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcWordList(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcNumberList(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcNumberList(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcNumberList(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcNumberList(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcNumberList(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcNumberList(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcBoolean(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcBoolean(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcBoolean(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcBoolean(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcBoolean(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.CalcBoolean(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.Calc(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.Calc(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.Calc(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.Calc(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.Calc(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluator.Calc(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="T:NoStringEvaluating.Contract.INoStringEvaluatorNullable">
            <summary>
            Expression evaluator with nullable result
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcNumber(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcNumber(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcNumber(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcNumber(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcNumber(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcNumber(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcWord(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcWord(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcWord(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcWord(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcWord(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcWord(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcDateTime(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcDateTime(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcDateTime(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcDateTime(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcDateTime(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcDateTime(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcWordList(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcWordList(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcWordList(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcWordList(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcWordList(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcWordList(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcNumberList(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcNumberList(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcNumberList(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcNumberList(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcNumberList(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcNumberList(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcBoolean(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcBoolean(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcBoolean(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcBoolean(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcBoolean(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.CalcBoolean(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.Calc(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.Calc(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.Calc(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.Calc(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.Calc(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.Contract.INoStringEvaluatorNullable.Calc(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="T:NoStringEvaluating.Contract.Variables.IVariable">
            <summary>
            Variable model
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Contract.Variables.IVariable.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Contract.Variables.IVariable.Value">
            <summary>
            Value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Contract.Variables.IVariablesContainer">
            <summary>
            Container with variables
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.Variables.IVariablesContainer.AddOrUpdate(System.String,NoStringEvaluating.Models.Values.EvaluatorValue)">
            <summary>
            Add or update variable
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.Variables.IVariablesContainer.GetValue(System.String)">
            <summary>
            Return variable's value
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Contract.Variables.IVariablesContainer.TryGetValue(System.String,NoStringEvaluating.Models.Values.EvaluatorValue@)">
            <summary>
            Return variable's value if possible
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Exceptions.NoStringFunctionException">
            <summary>
            Raises when function exception
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Exceptions.NoStringFunctionException.#ctor(System.String)">
            <summary>
            Raises when function exception
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Exceptions.VariableNotFoundException">
            <summary>
            Raises when can't find a variable
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Exceptions.VariableNotFoundException.VariableName">
            <summary>
            VariableName
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Exceptions.VariableNotFoundException.#ctor(System.String,System.String)">
            <summary>
            Raises when can't find a variable
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Extensions.NoStringEvaluatorExtensions">
            <summary>
            Extension for debugging
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Extensions.NoStringEvaluatorExtensions.VariableValuesUsedByFormula(NoStringEvaluating.NoStringEvaluator,System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Return list of variable values used by formula
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Extensions.NoStringEvaluatorExtensions.VariableValuesUsedByFormula(NoStringEvaluating.NoStringEvaluator,NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Return list of variable values used by formula
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Extensions.NoStringEvaluatorExtensions.VariableValuesUsedByFormula(NoStringEvaluating.NoStringEvaluator,System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Return list of variable values used by formula
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Extensions.NoStringEvaluatorExtensions.VariableValuesUsedByFormula(NoStringEvaluating.NoStringEvaluator,NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Return list of variable values used by formula
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Extensions.NoStringEvaluatorExtensions.VariableValuesUsedByFormulaInternal(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.BaseFormulaNode},NoStringEvaluating.Services.Variables.VariablesSource)">
            <summary>
            Routine to check what variables the calculation actually receives and uses. Without doing the actual calculation. Usefull for debugging and logging
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Factories.BooleanFactory">
            <summary>
            BooleanFactory
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Factories.BooleanFactory.#ctor(NoStringEvaluating.Models.Values.ValueKeeperContainer)">
            <summary>
            BooleanFactory
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Factories.BooleanFactory.Create(System.Nullable{System.Boolean})">
            <summary>
            Creates boolean value
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Factories.BooleanFactory.Create(System.Boolean)">
            <summary>
            Creates boolean value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Factories.DateTimeFactory">
            <summary>
            DateTimeFactory
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Factories.DateTimeFactory.Empty">
            <summary>
            Default
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Factories.DateTimeFactory.Create(System.Nullable{System.DateTime})">
            <summary>
            Creates DateTime value
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Factories.DateTimeFactory.Create(System.DateTime)">
            <summary>
            Creates DateTime value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Factories.NumberListFactory">
            <summary>
            NumberListFactory
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Factories.NumberListFactory.#ctor(NoStringEvaluating.Models.Values.ValueKeeperContainer)">
            <summary>
            NumberListFactory
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Factories.NumberListFactory.Create(System.Collections.Generic.List{System.Double})">
            <summary>
            Creates NumberList value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Factories.ObjectFactory">
            <summary>
            ObjectFactory
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Factories.ObjectFactory.#ctor(NoStringEvaluating.Models.Values.ValueKeeperContainer)">
            <summary>
            ObjectFactory
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Factories.ObjectFactory.Create(System.Object)">
            <summary>
            Creates object value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Factories.ValueFactory">
            <summary>
            Factory fro values
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Factories.ValueFactory.DateTime">
            <summary>
            DateTimeFactory
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Factories.ValueFactory.Boolean">
            <summary>
            BooleanFactory
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Factories.ValueFactory.Word">
            <summary>
            WordFactory
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Factories.ValueFactory.WordList">
            <summary>
            WordListFactory
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Factories.ValueFactory.NumberList">
            <summary>
            NumberListFactory
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Factories.ValueFactory.Object">
            <summary>
            ObjectFactory
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Factories.WordFactory">
            <summary>
            WordFactory
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Factories.WordFactory.#ctor(NoStringEvaluating.Models.Values.ValueKeeperContainer)">
            <summary>
            WordFactory
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Factories.WordFactory.Empty">
            <summary>
            Creates default
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Factories.WordFactory.Concat(NoStringEvaluating.Models.Values.InternalEvaluatorValue,NoStringEvaluating.Models.Values.InternalEvaluatorValue)">
            <summary>
            Concates two values to word
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Factories.WordFactory.Create(System.String)">
            <summary>
            Creates word value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Factories.WordListFactory">
            <summary>
            WordListFactory
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Factories.WordListFactory.#ctor(NoStringEvaluating.Models.Values.ValueKeeperContainer)">
            <summary>
            WordListFactory
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Factories.WordListFactory.Create(System.Collections.Generic.List{System.String})">
            <summary>
            Creates WordList value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Base.IFunction">
            <summary>
            Function
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Base.IFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Base.IFunction.CanHandleNullArguments">
            <summary>
            If false and any argument is null - function wont be executed and null will be returned
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Base.IFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.CountFunction">
            <summary>
            Returns a number of elements
            <para>Count(1; 2; myList)</para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.CountFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.CountFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.CountFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.Date.AddHoursFunction">
            <summary>
            Adds a number of hours to a datetime
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Date.AddHoursFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Date.AddHoursFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.Date.AddHoursFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.Date.AddMinutesFunction">
            <summary>
            Adds a number of minutes to a datetime
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Date.AddMinutesFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Date.AddMinutesFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.Date.AddMinutesFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.Date.AddSecondsFunction">
            <summary>
            Adds a number of seconds to a datetime
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Date.AddSecondsFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Date.AddSecondsFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.Date.AddSecondsFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.Date.DateDifFunction">
            <summary>
            Calculates the number of days, months, or years between two dates
            <para>DateDif(date1; date2; 'Y'), can be: Y, M, D</para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Date.DateDifFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Date.DateDifFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.Date.DateDifFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.Date.DateFormatFunction">
            <summary>
            DateFormat(Now(); 'yyyy MMMM')
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Date.DateFormatFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Date.DateFormatFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.Date.DateFormatFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.Date.DayFunction">
            <summary>
            Returns a day from dateTime
            <para>Day(Now()) or Day(Now(); 'DD')</para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Date.DayFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Date.DayFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.Date.DayFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.Date.MonthFunction">
            <summary>
            Returns a month from dateTime
            <para>Month(Now()) or Month(Now(); 'MM')</para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Date.MonthFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Date.MonthFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.Date.MonthFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.Date.NowFunction">
            <summary>
            Returns Datetime.Now
            <para>Now()</para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Date.NowFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Date.NowFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.Date.NowFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.Date.TimeDifFunction">
            <summary>
            Calculates the number of hours, minutes, or seconds between two dates
            <para>TimeDif(dateTime1; dateTime2; 'H'), can be: H, M, S</para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Date.TimeDifFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Date.TimeDifFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.Date.TimeDifFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.Date.ToDateTimeFunction">
            <summary>
            Returns datetime value from string
            <para>ToDateTime('8/15/2002')</para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Date.ToDateTimeFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Date.ToDateTimeFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.Date.ToDateTimeFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.Date.TodayFunction">
            <summary>
            Returns the current date
            <para>Today()</para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Date.TodayFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Date.TodayFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.Date.TodayFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.Date.WeekDayFunction">
            <summary>
            Takes a date and returns a number between 1-7 representing the day of week
            <para>WeekDay(Today())</para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Date.WeekDayFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Date.WeekDayFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.Date.WeekDayFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.Date.YearFunction">
            <summary>
            Returns a year from dateTime
            <para>Year(Now()) or Year(Now(); 'YY')</para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Date.YearFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Date.YearFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.Date.YearFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.IsErrorFunction">
            <summary>
            IsError(ToNumber('Text'))
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.IsErrorFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.IsErrorFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.IsErrorFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.IsMemberFunction">
            <summary>
            IsMember(myList; item)
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.IsMemberFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.IsMemberFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.IsMemberFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.IsNumberFunction">
            <summary>
            IsNumber(5)
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.IsNumberFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.IsNumberFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.IsNumberFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.LenFunction">
            <summary>
            Returns the number of characters in a text string
            <para>Len(myWord)</para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.LenFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.LenFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.LenFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.SortFunction">
            <summary>
            SORT(myList; sortType)
            <para>sortType: true - asc, false - desc</para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.SortFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.SortFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.SortFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.ToNumberFunction">
            <summary>
            ToNumber('05')
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.ToNumberFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.ToNumberFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.ToNumberFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.Word.ConcatFunction">
            <summary>
            Concates values
            <para>Concat(56; '_myWord') or Concat(myList; myArg; 45; myList2)</para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Word.ConcatFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Word.ConcatFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.Word.ConcatFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.Word.ExplodeFunction">
            <summary>
            Returns a text list composed of the elements of a text string
            <para>Explode(myWord) or Explode(myWord; separator)</para>
            <para>separator by default is white space " "</para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Word.ExplodeFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Word.ExplodeFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.Word.ExplodeFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.Word.ImplodeFunction">
            <summary>
            Concatenates all members of a text list and returns a text string
            <para>Implode(myList) or Implode(myList; separator) or Implode(myList; 5; 'my wordd'; separator) last value is separator</para>
            <para>separator by default is empty ""</para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Word.ImplodeFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Word.ImplodeFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.Word.ImplodeFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.Word.IsTextFunction">
            <summary>
            IsText('my text')
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Word.IsTextFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Word.IsTextFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.Word.IsTextFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.Word.LeftFunction">
            <summary>
            Searches a string from left to right and returns the leftmost characters of the string
            <para>Left(myWord) or Left(myWord; numberOfChars) or Left(myWord; subWord) </para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Word.LeftFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Word.LeftFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.Word.LeftFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.Word.LowerFunction">
            <summary>
            Converts text to lowercase
            <para>Lower(myWord) or Lower(myWordList)</para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Word.LowerFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Word.LowerFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.Word.LowerFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.Word.MiddleFunction">
            <summary>
            Returns any substring from the middle of a string
            <para>Middle(myWord; indexStart; numberChars) or Middle(myWord; indexStart; wordEnd)  or Middle(myWord; wordStart; numberChars) or Middle(myWord; wordStart; wordEnd)</para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Word.MiddleFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Word.MiddleFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.Word.MiddleFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.Word.ProperFunction">
            <summary>
            Capitalizes the first letter in each word of a text
            <para>Proper(myWord)</para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Word.ProperFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Word.ProperFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.Word.ProperFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.Word.ReplaceFunction">
            <summary>
            Replaces characters within text
            <para>Replace(myWord; oldPart; newPart) or Replace(myList; oldPart; newPart)</para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Word.ReplaceFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Word.ReplaceFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.Word.ReplaceFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.Word.RightFunction">
            <summary>
            Searches a string from right to left and returns the rightmost characters of the string
            <para>Right(myWord) or Right(myWord; numberOfChars) or Right(myWord; subWord) </para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Word.RightFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Word.RightFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.Word.RightFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.Word.TextFunction">
            <summary>
            Return text from first argument
            <para>Text(26)</para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Word.TextFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Word.TextFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.Word.TextFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.Word.UniqueFunction">
            <summary>
            Unique(myList) or Unique(myList; true)
            <para>if second parameter is true then returns only unique</para>
            <para>if second parameter is false then returns list without doubles</para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Word.UniqueFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Word.UniqueFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.Word.UniqueFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Excel.Word.UpperFunction">
            <summary>
            Converts text to uppercase
            <para>Upper(myWord) or Upper(myWordList)</para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Word.UpperFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Excel.Word.UpperFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Excel.Word.UpperFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Logic.AndFunction">
            <summary>
            Function - and
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Logic.AndFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Logic.AndFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Logic.AndFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Logic.IffFunction">
            <summary>
            Function - iff
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Logic.IffFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Logic.IffFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Logic.IffFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Logic.IfFunction">
            <summary>
            Function - if
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Logic.IfFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Logic.IfFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Logic.IfFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Logic.IsNanFunction">
            <summary>
            Function - isNaN
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Logic.IsNanFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Logic.IsNanFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Logic.IsNanFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Logic.NotAliasFunction">
            <summary>
            Function - not
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Logic.NotAliasFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Logic.NotAliasFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Logic.NotAliasFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Logic.NotFunction">
            <summary>
            Function - not
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Logic.NotFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Logic.NotFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Logic.NotFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Logic.OrFunction">
            <summary>
            Function - or
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Logic.OrFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Logic.OrFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Logic.OrFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.AbsFunction">
            <summary>
            Function - abs
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.AbsFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.AbsFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.AbsFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.AddFunction">
            <summary>
            Function - add
            <para>Add(1; 2; 3) or Add(myList; 1)</para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.AddFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.AddFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.AddFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.CeilFunction">
            <summary>
            Function - ceil
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.CeilFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.CeilFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.CeilFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.FactFunction">
            <summary>
            Function - fact
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.FactFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.FactFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.FactFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.FibFunction">
            <summary>
            Function - fib
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.FibFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.FibFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.FibFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.FloorFunction">
            <summary>
            Function - floor
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.FloorFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.FloorFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.FloorFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.GcdFunction">
            <summary>
            Function - gcd
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.GcdFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.GcdFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.GcdFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.LcmFunction">
            <summary>
            Function - lcm
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.LcmFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.LcmFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.LcmFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.LnFunction">
            <summary>
            Function - ln
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.LnFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.LnFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.LnFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Log10Function">
            <summary>
            Function - log10
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Log10Function.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Log10Function.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Log10Function.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Log2Function">
            <summary>
            Function - log2
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Log2Function.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Log2Function.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Log2Function.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.LogFunction">
            <summary>
            Function - log
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.LogFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.LogFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.LogFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.MaxFunction">
            <summary>
            Function - max
            <para>Max(1; 2; 3) or Max(myList; 2; 3)</para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.MaxFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.MaxFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.MaxFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.MeanFunction">
            <summary>
            Function - mean
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.MeanFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.MeanFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.MeanFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.MinFunction">
            <summary>
            Function - min
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.MinFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.MinFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.MinFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.ModFunction">
            <summary>
            Function - mod
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.ModFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.ModFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.ModFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.MultiFunction">
            <summary>
            Function - multi
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.MultiFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.MultiFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.MultiFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.RoundFunction">
            <summary>
            Rounds the designated number to the specified decimals
            <para>Round(15.7865; 2)</para>
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.RoundFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.RoundFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.RoundFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Execute value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.SgnFunction">
            <summary>
            Function - sgn
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.SgnFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.SgnFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.SgnFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.SignFunction">
            <summary>
            Function - sign
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.SignFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.SignFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.SignFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.SqrtFunction">
            <summary>
            Function - sqrt
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.SqrtFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.SqrtFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.SqrtFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate function
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.AcosechFunction">
            <summary>
            Function - acosech
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.AcosechFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.AcosechFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.AcosechFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.AcschFunction">
            <summary>
            Function - acsch
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.AcschFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.AcschFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.AcschFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.ArccschFunction">
            <summary>
            Function - arccsch
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.ArccschFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.ArccschFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.ArccschFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.ArcosechFunction">
            <summary>
            Function - arcosech
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.ArcosechFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.ArcosechFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.ArcosechFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.ArcschFunction">
            <summary>
            Function - arcsch
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.ArcschFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.ArcschFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.ArcschFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CosecFunction">
            <summary>
            Function - cosec
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CosecFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CosecFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CosecFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CosechFunction">
            <summary>
            Function - cosech
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CosechFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CosechFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CosechFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CscFunction">
            <summary>
            Function - csc
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CscFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CscFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CscFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CschFunction">
            <summary>
            Function - csch
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CschFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CschFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cosec.CschFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cos.AcosFunction">
            <summary>
            Function - acos
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cos.AcosFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cos.AcosFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cos.AcosFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cos.AcoshFunction">
            <summary>
            Function - acosh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cos.AcoshFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cos.AcoshFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cos.AcoshFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArccosFunction">
            <summary>
            Function - arccos
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArccosFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArccosFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArccosFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArccoshFunction">
            <summary>
            Function - arccosh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArccoshFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArccoshFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArccoshFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArcosFunction">
            <summary>
            Function - arcos
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArcosFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArcosFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArcosFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArcoshFunction">
            <summary>
            Function - arcosh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArcoshFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArcoshFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cos.ArcoshFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cos.CosFunction">
            <summary>
            Function - cos
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cos.CosFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cos.CosFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cos.CosFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate va;ue
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cos.CoshFunction">
            <summary>
            Function - cosh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cos.CoshFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cos.CoshFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cos.CoshFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.AcotFunction">
            <summary>
            Function - acot
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.AcotFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.AcotFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.AcotFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.AcothFunction">
            <summary>
            Function - acoth
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.AcothFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.AcothFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.AcothFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActanFunction">
            <summary>
            Function - actan
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActanFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActanFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActanFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActanhFunction">
            <summary>
            Function - actanh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActanhFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActanhFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActanhFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActgFunction">
            <summary>
            Function - actg
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActgFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActgFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActgFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActghFunction">
            <summary>
            Function - actgh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActghFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActghFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ActghFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArccotFunction">
            <summary>
            Function - arccot
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArccotFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArccotFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArccotFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArccothFunction">
            <summary>
            Function - arccoth
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArccothFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArccothFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArccothFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctanFunction">
            <summary>
            Function - arcctan
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctanFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctanFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctanFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctanhFunction">
            <summary>
            Function - arcctanh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctanhFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctanhFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctanhFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctgFunction">
            <summary>
            Function - arcctg
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctgFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctgFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctgFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctghFunction">
            <summary>
            Function - arcctgh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctghFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctghFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.ArcctghFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CotFunction">
            <summary>
            Function - cot
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CotFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CotFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CotFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CothFunction">
            <summary>
            Function - coth
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CothFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CothFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CothFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate function
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtanFunction">
            <summary>
            Function - ctan
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtanFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtanFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtanFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtanhFunction">
            <summary>
            Function - ctanh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtanhFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtanhFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtanhFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtgFunction">
            <summary>
            Function - ctg
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtgFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtgFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtgFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtghFunction">
            <summary>
            Function - ctgh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtghFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtghFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Cotan.CtghFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.DegFunction">
            <summary>
            Function - deg
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.DegFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.DegFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.DegFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.ExpFunction">
            <summary>
            Function - exp
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.ExpFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.ExpFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.ExpFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.RadFunction">
            <summary>
            Function - rad
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.RadFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.RadFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.RadFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sec.ArcsecFunction">
            <summary>
            Function - arcsec
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sec.ArcsecFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sec.ArcsecFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sec.ArcsecFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sec.ArcsechFunction">
            <summary>
            Function - arcsech
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sec.ArcsechFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sec.ArcsechFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sec.ArcsechFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sec.ArsechFunction">
            <summary>
            Function - arsech
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sec.ArsechFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sec.ArsechFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sec.ArsechFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sec.AsechFunction">
            <summary>
            Function - asech
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sec.AsechFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sec.AsechFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sec.AsechFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sec.SecFunction">
            <summary>
            Function - sec
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sec.SecFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sec.SecFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sec.SecFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sec.SechFunction">
            <summary>
            Function - sech
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sec.SechFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sec.SechFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sec.SechFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArcsinFunction">
            <summary>
            Function - arcsin
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArcsinFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArcsinFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArcsinFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArcsinhFunction">
            <summary>
            Function - arcsinh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArcsinhFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArcsinhFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArcsinhFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArsinFunction">
            <summary>
            Function - arsin
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArsinFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArsinFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArsinFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArsinhFunction">
            <summary>
            Function - arsinh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArsinhFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArsinhFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sin.ArsinhFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sin.AsinFunction">
            <summary>
            Function - asin
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sin.AsinFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sin.AsinFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sin.AsinFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sin.AsinhFunction">
            <summary>
            Function - asinh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sin.AsinhFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sin.AsinhFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sin.AsinhFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sin.SinFunction">
            <summary>
            Function - sin
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sin.SinFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sin.SinFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sin.SinFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Sin.SinhFunction">
            <summary>
            Function - sinh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sin.SinhFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Sin.SinhFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Sin.SinhFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctanFunction">
            <summary>
            Function - arctan
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctanFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctanFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctanFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctanhFunction">
            <summary>
            Function - arctanh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctanhFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctanhFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctanhFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctgFunction">
            <summary>
            Function - arctg
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctgFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctgFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctgFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctghFunction">
            <summary>
            Function - arctgh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctghFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctghFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Tan.ArctghFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtanFunction">
            <summary>
            Function - atan
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtanFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtanFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtanFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtanhFunction">
            <summary>
            Function - atanh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtanhFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtanhFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtanhFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtgFunction">
            <summary>
            Function - atg
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtgFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtgFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtgFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtghFunction">
            <summary>
            Function - atgh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtghFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtghFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Tan.AtghFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TanFunction">
            <summary>
            Function - tan
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TanFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TanFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TanFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TanhFunction">
            <summary>
            Function - tanh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TanhFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TanhFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TanhFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TgFunction">
            <summary>
            Function - tg
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TgFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TgFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TgFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TghFunction">
            <summary>
            Function - tgh
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TghFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TghFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Math.Trigonometry.Tan.TghFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate value
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Null.IfNullFunction">
            <summary>
            Function - IfNull(x,3) => Returns 3 if x is Null
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Null.IfNullFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Null.IfNullFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Null.IfNullFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate function
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Null.IsNullFunction">
            <summary>
            Function - IsNull(x) => Returns TRUE x is Null
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Null.IsNullFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Null.IsNullFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Null.IsNullFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate function
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Functions.Null.NullIfFunction">
            <summary>
            Function - NullIf(x,3) => Returns NULL if x == 3
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Null.NullIfFunction.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Functions.Null.NullIfFunction.CanHandleNullArguments">
            <summary>
            Can handle IsNull arguments?
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Functions.Null.NullIfFunction.Execute(System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue},NoStringEvaluating.Factories.ValueFactory)">
            <summary>
            Evaluate function
            </summary>
        </member>
        <member name="T:NoStringEvaluating.GlobalOptions">
            <summary>
            Global options
            </summary>
        </member>
        <member name="P:NoStringEvaluating.GlobalOptions.FloatingTolerance">
            <summary>
            Floating tolerance for understanding Zero number
            </summary>
        </member>
        <member name="P:NoStringEvaluating.GlobalOptions.FloatingPointSymbol">
            <summary>
            Symbol of floating point
            </summary>
        </member>
        <member name="P:NoStringEvaluating.GlobalOptions.WordQuotationMark">
            <summary>
            Quotation mark
            </summary>
        </member>
        <member name="P:NoStringEvaluating.GlobalOptions.UseWordQuotationMark">
            <summary>
            Use quotation mark
            </summary>
        </member>
        <member name="P:NoStringEvaluating.GlobalOptions.ThrowIfVariableNotFound">
            <summary>
            If set true - throws exception when variable not found, if set false - returns Null
            </summary>
        </member>
        <member name="P:NoStringEvaluating.GlobalOptions.FunctionsAssemblies">
            <summary>
            Assemblies with functions
            </summary>
        </member>
        <member name="P:NoStringEvaluating.GlobalOptions.Functions">
            <summary>
            Functions
            </summary>
        </member>
        <member name="M:NoStringEvaluating.GlobalOptions.#cctor">
            <summary>
            Global options
            </summary>
        </member>
        <member name="M:NoStringEvaluating.GlobalOptions.Reset">
            <summary>
            Reset to default
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Models.Bracket">
            <summary>
            Bracket enum.
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Bracket.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Bracket.Open">
            <summary>
            Open
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Bracket.Close">
            <summary>
            Close
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Models.FloatingPointSymbol">
            <summary>
            Symbol of floating point
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.FloatingPointSymbol.Dot">
            <summary>
            .
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.FloatingPointSymbol.Comma">
            <summary>
            ,
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.FloatingPointSymbol.DotComma">
            <summary>
            . or ,
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Models.FormulaChecker.CheckFormulaResult">
            <summary>
            Syntax checking result
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.FormulaChecker.CheckFormulaResult.Mistakes">
            <summary>
            Mistakes
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.FormulaChecker.CheckFormulaResult.Ok">
            <summary>
            Is checking OK
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.FormulaChecker.CheckFormulaResult.#ctor(System.Collections.Generic.List{NoStringEvaluating.Models.FormulaChecker.FormulaCheckerModel})">
            <summary>
            Syntax checking result
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.FormulaChecker.CheckFormulaResult.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.FormulaChecker.CheckFormulaResult.op_Implicit(NoStringEvaluating.Models.FormulaChecker.CheckFormulaResult)~System.Boolean">
            <summary>
            Cast to bool
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Models.FormulaChecker.FormulaCheckerMistakeType">
            <summary>
            Checker mistake type
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.FormulaChecker.FormulaCheckerMistakeType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.FormulaChecker.FormulaCheckerMistakeType.WrongBracketsNumber">
            <summary>
            Wrong number of brackets
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.FormulaChecker.FormulaCheckerMistakeType.EmptyBrackets">
            <summary>
            Empty brackets
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.FormulaChecker.FormulaCheckerMistakeType.OperatorBetweenPrevAndCurrentNode">
            <summary>
            Between prevNode and node must be an operator
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.FormulaChecker.FormulaCheckerMistakeType.OperatorBetweenCurrentAndNextNode">
            <summary>
            Between node and nextNode must be an operator
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.FormulaChecker.FormulaCheckerMistakeType.OperatorBetweenPrevAndNextNode">
            <summary>
            Between prevNode and nextNode must be an operator, not node"
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.FormulaChecker.FormulaCheckerMistakeType.NumberBeforeNode">
            <summary>
            Before node must be a number or a closed bracket, not prevNodeName"
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.FormulaChecker.FormulaCheckerMistakeType.NumberAfterNode">
            <summary>
            After node must be a number or an opened bracket, not nextNodeName"
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.FormulaChecker.FormulaCheckerMistakeType.EmptyFunctionBody">
            <summary>
            Empty function's body
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.FormulaChecker.FormulaCheckerMistakeType.DoubledFunctionCharNodes">
            <summary>
            Two or more function chars in a sequence
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Models.FormulaChecker.FormulaCheckerModel">
            <summary>
            Formula checker result item
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.FormulaChecker.FormulaCheckerModel.MistakeType">
            <summary>
            Mistake's type
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.FormulaChecker.FormulaCheckerModel.Message">
            <summary>
            Message
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.FormulaChecker.FormulaCheckerModel.MessageParts">
            <summary>
            Important message parts
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.FormulaChecker.FormulaCheckerModel.#ctor(NoStringEvaluating.Models.FormulaChecker.FormulaCheckerMistakeType,System.String,System.String[])">
            <summary>
            Formula checker result item
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.FormulaChecker.FormulaCheckerModel.#ctor(NoStringEvaluating.Models.FormulaChecker.FormulaCheckerMistakeType,System.String)">
            <summary>
            Formula checker result item
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.FormulaChecker.FormulaCheckerModel.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.FormulaChecker.FormulaCheckerModel.op_Implicit(NoStringEvaluating.Models.FormulaChecker.FormulaCheckerModel)~System.String">
            <summary>
            Cast to string
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Models.FunctionChar">
            <summary>
            Chars used by function
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.FunctionChar.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.FunctionChar.Semicolon">
            <summary>
            Semicolon
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.FunctionChar.Comma">
            <summary>
            Comma
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Models.Operator">
            <summary>
            Operators
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.Undefined">
            <summary>
            Undefined
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.Plus">
            <summary>
            +
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.Minus">
            <summary>
            -
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.Multiply">
            <summary>
            *
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.Divide">
            <summary>
            /
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.Power">
            <summary>
            ^
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.Less">
            <summary>
            Less
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.LessEqual">
            <summary>
            Less or equal
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.More">
            <summary>
            More
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.MoreEqual">
            <summary>
            More or equal
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.Equal">
            <summary>
            ==
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.NotEqual">
            <summary>
            !=
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.And">
            <summary>
            And
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Operator.Or">
            <summary>
            Or
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Models.Values.EvaluatorValue">
            <summary>
            Value
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.EvaluatorValue.TypeKey">
            <summary>
            Type key
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.EvaluatorValue.Number">
            <summary>
            Number
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.EvaluatorValue.Boolean">
            <summary>
            Boolean
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.EvaluatorValue.DateTime">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.EvaluatorValue.Word">
            <summary>
            Word
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.EvaluatorValue.WordList">
            <summary>
            WordList
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.EvaluatorValue.NumberList">
            <summary>
            NumberList
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.EvaluatorValue.Object">
            <summary>
            Object
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.EvaluatorValue.#ctor(System.Double)">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.EvaluatorValue.#ctor(System.Nullable{System.Double})">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.EvaluatorValue.#ctor(System.Boolean)">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.EvaluatorValue.#ctor(System.Nullable{System.Boolean})">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.EvaluatorValue.#ctor(System.DateTime)">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.EvaluatorValue.#ctor(System.Nullable{System.DateTime})">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.EvaluatorValue.#ctor(System.String)">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.EvaluatorValue.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.EvaluatorValue.#ctor(System.Collections.Generic.List{System.Double})">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.EvaluatorValue.#ctor(System.Object)">
            <summary>
            Value
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.EvaluatorValue.op_Implicit(System.Double)~NoStringEvaluating.Models.Values.EvaluatorValue">
            <summary>
            To EvaluatorValue
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.EvaluatorValue.op_Implicit(System.Boolean)~NoStringEvaluating.Models.Values.EvaluatorValue">
            <summary>
            To EvaluatorValue
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.EvaluatorValue.op_Implicit(System.DateTime)~NoStringEvaluating.Models.Values.EvaluatorValue">
            <summary>
            To EvaluatorValue
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.EvaluatorValue.op_Implicit(System.String)~NoStringEvaluating.Models.Values.EvaluatorValue">
            <summary>
            To EvaluatorValue
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.EvaluatorValue.op_Implicit(System.Collections.Generic.List{System.String})~NoStringEvaluating.Models.Values.EvaluatorValue">
            <summary>
            To EvaluatorValue
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.EvaluatorValue.op_Implicit(System.Collections.Generic.List{System.Double})~NoStringEvaluating.Models.Values.EvaluatorValue">
            <summary>
            To EvaluatorValue
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.EvaluatorValue.op_Implicit(NoStringEvaluating.Models.Values.InternalEvaluatorValue)~NoStringEvaluating.Models.Values.EvaluatorValue">
            <summary>
            To EvaluatorValue
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.EvaluatorValue.Equals(System.Object)">
            <summary>
            Equals
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.EvaluatorValue.Equals(NoStringEvaluating.Models.Values.EvaluatorValue)">
            <summary>
            Equals
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.EvaluatorValue.GetHashCode">
            <summary>
            GetHashCode
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.EvaluatorValue.op_Equality(NoStringEvaluating.Models.Values.EvaluatorValue,NoStringEvaluating.Models.Values.EvaluatorValue)">
            <summary>
            Equals
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.EvaluatorValue.op_Inequality(NoStringEvaluating.Models.Values.EvaluatorValue,NoStringEvaluating.Models.Values.EvaluatorValue)">
            <summary>
            Equals
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.EvaluatorValue.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Models.Values.InternalEvaluatorValue">
            <summary>
            Value for internal processing
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.InternalEvaluatorValue.#ctor(System.IntPtr,NoStringEvaluating.Models.Values.ValueTypeKey)">
            <summary>
            Value for internal processing
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.InternalEvaluatorValue.#ctor(System.Double)">
            <summary>
            Value for internal processing
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.InternalEvaluatorValue.#ctor(System.Nullable{System.Double})">
            <summary>
            Value for internal processing
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.InternalEvaluatorValue.TypeKey">
            <summary>
            Type key
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.InternalEvaluatorValue.IsNumber">
            <summary>
            IsNumber
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.InternalEvaluatorValue.IsDateTime">
            <summary>
            IsDateTime
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.InternalEvaluatorValue.IsBoolean">
            <summary>
            IsBoolean
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.InternalEvaluatorValue.IsWord">
            <summary>
            IsWord
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.InternalEvaluatorValue.IsWordList">
            <summary>
            IsWordList
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.InternalEvaluatorValue.IsNumberList">
            <summary>
            IsNumberList
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.InternalEvaluatorValue.IsObject">
            <summary>
            IsObject
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.InternalEvaluatorValue.IsNull">
            <summary>
            IsNull
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.InternalEvaluatorValue.Number">
            <summary>
            Number value
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.InternalEvaluatorValue.DateTime">
            <summary>
            DateTime value
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.InternalEvaluatorValue.Boolean">
            <summary>
            Boolean value
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.InternalEvaluatorValue.Word">
            <summary>
            Word value
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.InternalEvaluatorValue.WordList">
            <summary>
            WordList value
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.InternalEvaluatorValue.NumberList">
            <summary>
            NumberList value
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.InternalEvaluatorValue.Object">
            <summary>
            Object value
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.InternalEvaluatorValue.GetObject``1">
            <summary>
            Returns object
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.InternalEvaluatorValue.Equals(System.Object)">
            <summary>
            Equals
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.InternalEvaluatorValue.Equals(NoStringEvaluating.Models.Values.InternalEvaluatorValue)">
            <summary>
            Equals
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.InternalEvaluatorValue.GetHashCode">
            <summary>
            GetHashCode
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.InternalEvaluatorValue.op_Equality(NoStringEvaluating.Models.Values.InternalEvaluatorValue,NoStringEvaluating.Models.Values.InternalEvaluatorValue)">
            <summary>
            Equal
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.InternalEvaluatorValue.op_Inequality(NoStringEvaluating.Models.Values.InternalEvaluatorValue,NoStringEvaluating.Models.Values.InternalEvaluatorValue)">
            <summary>
            Not equal
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.InternalEvaluatorValue.op_Implicit(NoStringEvaluating.Models.Values.InternalEvaluatorValue)~System.Double">
            <summary>
            To number
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.InternalEvaluatorValue.op_Implicit(NoStringEvaluating.Models.Values.InternalEvaluatorValue)~System.String">
            <summary>
            To string
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.InternalEvaluatorValue.op_Implicit(NoStringEvaluating.Models.Values.InternalEvaluatorValue)~System.DateTime">
            <summary>
            To DateTime
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.InternalEvaluatorValue.op_Implicit(NoStringEvaluating.Models.Values.InternalEvaluatorValue)~System.Boolean">
            <summary>
            To boolean
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.InternalEvaluatorValue.op_Implicit(NoStringEvaluating.Models.Values.InternalEvaluatorValue)~System.Collections.Generic.List{System.String}">
            <summary>
            To word List
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.InternalEvaluatorValue.op_Implicit(NoStringEvaluating.Models.Values.InternalEvaluatorValue)~System.Collections.Generic.List{System.Double}">
            <summary>
            To number List
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.InternalEvaluatorValue.op_Implicit(System.Double)~NoStringEvaluating.Models.Values.InternalEvaluatorValue">
            <summary>
            To InternalEvaluatorValue
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.InternalEvaluatorValue.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Models.Values.ValueKeeper">
            <summary>
            Keeper for values
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.ValueKeeper.#ctor">
            <summary>
            Keeper for values
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.ValueKeeper.Ptr">
            <summary>
            Pointer to this object
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.ValueKeeper.DateTime">
            <summary>
            DateTime value
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.ValueKeeper.Boolean">
            <summary>
            Boolean value
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.ValueKeeper.Word">
            <summary>
            Word value
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.ValueKeeper.WordList">
            <summary>
            WordList value
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.ValueKeeper.NumberList">
            <summary>
            NumberList value
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.ValueKeeper.Object">
            <summary>
            Object value
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.ValueKeeper.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Models.Values.ValueKeeper.Zero">
            <summary>
            Zero keeper
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Models.Values.ValueKeeperContainer">
            <summary>
            Contains list of ids for extra types
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.ValueKeeperContainer.SetPool(Microsoft.Extensions.ObjectPool.ObjectPool{NoStringEvaluating.Models.Values.ValueKeeperContainer})">
            <summary>
            Set pool to release
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.ValueKeeperContainer.ResetIndex">
            <summary>
            Reset keepers index
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.ValueKeeperContainer.GetValueKeeper">
            <summary>
            Return valueKeeper
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.ValueKeeperContainer.Release">
            <summary>
            Release container
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Models.Values.ValueKeeperContainer.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Models.Values.ValueTypeKey">
            <summary>
            Type matching
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Values.ValueTypeKey.Null">
            <summary>
            Null
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Values.ValueTypeKey.Number">
            <summary>
            Number
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Values.ValueTypeKey.Boolean">
            <summary>
            Boolean
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Values.ValueTypeKey.DateTime">
            <summary>
            DateTime
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Values.ValueTypeKey.Word">
            <summary>
            Word
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Values.ValueTypeKey.WordList">
            <summary>
            Word list
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Values.ValueTypeKey.NumberList">
            <summary>
            Number list
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Models.Values.ValueTypeKey.Object">
            <summary>
            Object
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Nodes.Base.BaseFormulaNode">
            <summary>
            Formula node
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.Base.BaseFormulaNode.TypeKey">
            <summary>
            Type key
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.Base.BaseFormulaNode.#ctor(NoStringEvaluating.Nodes.Base.NodeTypeEnum)">
            <summary>
            Formula node
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Nodes.Base.NodeTypeEnum">
            <summary>
            Node type matching
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Nodes.Base.NodeTypeEnum.Null">
            <summary>
            Null
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Nodes.Base.NodeTypeEnum.Number">
            <summary>
            Number
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Nodes.Base.NodeTypeEnum.Operator">
            <summary>
            Operator
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Nodes.Base.NodeTypeEnum.Variable">
            <summary>
            Variable
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Nodes.Base.NodeTypeEnum.FunctionWrapper">
            <summary>
            Function wrapper
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Nodes.Base.NodeTypeEnum.Boolean">
            <summary>
            Boolean
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Nodes.Base.NodeTypeEnum.Word">
            <summary>
            Word
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Nodes.Base.NodeTypeEnum.WordList">
            <summary>
            WordList
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Nodes.Base.NodeTypeEnum.NumberList">
            <summary>
            NumberList
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Nodes.Base.NodeTypeEnum.Bracket">
            <summary>
            Bracket
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Nodes.Base.NodeTypeEnum.FunctionChar">
            <summary>
            Function char
            </summary>
        </member>
        <member name="F:NoStringEvaluating.Nodes.Base.NodeTypeEnum.Function">
            <summary>
            Function
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Nodes.BooleanNode">
            <summary>
            Formula node - Boolean
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.BooleanNode.Value">
            <summary>
            Boolean
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.BooleanNode.#ctor(System.Boolean)">
            <summary>
            Formula node - Boolean
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.BooleanNode.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Nodes.BracketNode">
            <summary>
            Formula node - Bracket
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.BracketNode.Bracket">
            <summary>
            Bracket
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.BracketNode.#ctor(NoStringEvaluating.Models.Bracket)">
            <summary>
            Formula node - bracket
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.BracketNode.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Nodes.Common.FormulaNodes">
            <summary>
            Formula nodes
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.Common.FormulaNodes.Nodes">
            <summary>
            Nodes
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.Common.FormulaNodes.#ctor(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.BaseFormulaNode})">
            <summary>
            Formula nodes
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.Common.FormulaNodes.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Nodes.FunctionCharNode">
            <summary>
            Formula node - FunctionChar
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.FunctionCharNode.FunctionChar">
            <summary>
            FunctionChar
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.FunctionCharNode.#ctor(NoStringEvaluating.Models.FunctionChar)">
            <summary>
            Formula node - FunctionChar
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.FunctionCharNode.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Nodes.FunctionNode">
            <summary>
            Formula node - Function
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.FunctionNode.Function">
            <summary>
            Function
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.FunctionNode.IsNegative">
            <summary>
            Has unary minus
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.FunctionNode.IsNegation">
            <summary>
            Has negation in boolean
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.FunctionNode.#ctor(NoStringEvaluating.Functions.Base.IFunction,System.Boolean,System.Boolean)">
            <summary>
            Formula node - Function
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.FunctionNode.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Nodes.FunctionWrapperNode">
            <summary>
            Formula node - Function wrapper
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.FunctionWrapperNode.FunctionNode">
            <summary>
            Function node
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.FunctionWrapperNode.FunctionArgumentNodes">
            <summary>
            Function arguments
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.FunctionWrapperNode.#ctor(NoStringEvaluating.Nodes.FunctionNode)">
            <summary>
            Formula node - Function wrapper
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.FunctionWrapperNode.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Nodes.NullNode">
            <summary>
            Formula node - Null
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.NullNode.#ctor">
            <summary>
            Null Const
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.NullNode.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Nodes.NumberListNode">
            <summary>
            Formula node - NumberList
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.NumberListNode.NumberList">
            <summary>
            NumberList
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.NumberListNode.#ctor(System.Collections.Generic.List{System.Double})">
            <summary>
            Formula node - NumberList
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.NumberListNode.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Nodes.NumberNode">
            <summary>
            Formula node - Number
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.NumberNode.Number">
            <summary>
            Number
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.NumberNode.#ctor(System.Double)">
            <summary>
            Formula node - Number
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.NumberNode.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Nodes.OperatorNode">
            <summary>
            Formula node - Operator
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.OperatorNode.OperatorKey">
            <summary>
            Operator
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.OperatorNode.Priority">
            <summary>
            Priority
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.OperatorNode.#ctor(NoStringEvaluating.Models.Operator)">
            <summary>
            Formula node - Operator
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.OperatorNode.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Nodes.VariableNode">
            <summary>
            Formula node - Variable
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.VariableNode.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.VariableNode.IsNegative">
            <summary>
            Has unary minus
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.VariableNode.IsNegation">
            <summary>
            Has negation in boolean
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.VariableNode.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Formula node - Variable
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.VariableNode.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Nodes.WordListNode">
            <summary>
            Formula node - WordList
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.WordListNode.WordList">
            <summary>
            WordList
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.WordListNode.#ctor(System.Collections.Generic.List{System.String})">
            <summary>
            Formula node - WordList
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.WordListNode.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Nodes.WordNode">
            <summary>
            Formula node - Word
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Nodes.WordNode.Word">
            <summary>
            Word
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.WordNode.#ctor(System.String)">
            <summary>
            Formula node - Word
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Nodes.WordNode.ToString">
            <summary>
            ToString
            </summary>
        </member>
        <member name="T:NoStringEvaluating.NoStringEvaluator">
            <summary>
            Expression evaluator
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.#ctor(Microsoft.Extensions.ObjectPool.ObjectPool{System.Collections.Generic.Stack{NoStringEvaluating.Models.Values.InternalEvaluatorValue}},Microsoft.Extensions.ObjectPool.ObjectPool{System.Collections.Generic.List{NoStringEvaluating.Models.Values.InternalEvaluatorValue}},Microsoft.Extensions.ObjectPool.ObjectPool{NoStringEvaluating.Models.Values.ValueKeeperContainer},NoStringEvaluating.Contract.IFormulaCache)">
            <summary>
            Expression evaluator
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcNumber(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcNumber(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcNumber(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcNumber(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcNumber(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcNumber(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcWord(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcWord(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcWord(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcWord(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcWord(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcWord(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcDateTime(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcDateTime(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcDateTime(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcDateTime(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcDateTime(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcDateTime(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcWordList(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcWordList(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcWordList(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcWordList(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcWordList(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcWordList(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcNumberList(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcNumberList(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcNumberList(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcNumberList(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcNumberList(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcNumberList(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcBoolean(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcBoolean(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcBoolean(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcBoolean(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcBoolean(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CalcBoolean(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.Calc(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.Calc(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.Calc(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.Calc(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.Calc(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.Calc(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluator.CreateFacade(System.Action{NoStringEvaluating.NoStringEvaluatorOptions})">
            <summary>
            Create evaluator facade
            </summary>
        </member>
        <member name="T:NoStringEvaluating.NoStringEvaluator.Facade">
            <summary>
            Facade
            </summary>
        </member>
        <member name="P:NoStringEvaluating.NoStringEvaluator.Facade.Evaluator">
            <summary>
            Evaluator
            </summary>
        </member>
        <member name="P:NoStringEvaluating.NoStringEvaluator.Facade.FunctionReader">
            <summary>
            FunctionReader
            </summary>
        </member>
        <member name="P:NoStringEvaluating.NoStringEvaluator.Facade.FormulaParser">
            <summary>
            FormulaParser
            </summary>
        </member>
        <member name="P:NoStringEvaluating.NoStringEvaluator.Facade.FormulaCache">
            <summary>
            FormulaCache
            </summary>
        </member>
        <member name="P:NoStringEvaluating.NoStringEvaluator.Facade.FormulaChecker">
            <summary>
            FormulaChecker
            </summary>
        </member>
        <member name="T:NoStringEvaluating.NoStringEvaluatorNullable">
            <summary>
            Expression evaluator with nullable result
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.#ctor(NoStringEvaluating.Contract.INoStringEvaluator)">
            <summary>
            Expression evaluator with nullable result
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcNumber(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcNumber(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcNumber(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcNumber(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcNumber(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcNumber(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcWord(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcWord(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcWord(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcWord(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcWord(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcWord(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcDateTime(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcDateTime(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcDateTime(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcDateTime(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcDateTime(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcDateTime(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcWordList(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcWordList(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcWordList(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcWordList(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcWordList(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcWordList(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcNumberList(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcNumberList(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcNumberList(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcNumberList(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcNumberList(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcNumberList(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcBoolean(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcBoolean(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcBoolean(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcBoolean(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcBoolean(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CalcBoolean(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.Calc(System.String,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.Calc(NoStringEvaluating.Nodes.Common.FormulaNodes,NoStringEvaluating.Contract.Variables.IVariablesContainer)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.Calc(System.String,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.Calc(NoStringEvaluating.Nodes.Common.FormulaNodes,System.Collections.Generic.IDictionary{System.String,NoStringEvaluating.Models.Values.EvaluatorValue})">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.Calc(System.String)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.Calc(NoStringEvaluating.Nodes.Common.FormulaNodes)">
            <summary>
            Calculate formula
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.VariableNotFoundException"></exception>
            <exception cref="T:System.InvalidCastException"></exception>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.CreateFacade(System.Action{NoStringEvaluating.NoStringEvaluatorOptions})">
            <summary>
            Create evaluator facade
            </summary>
        </member>
        <member name="T:NoStringEvaluating.NoStringEvaluatorNullable.Facade">
            <summary>
            Facade
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorNullable.Facade.#ctor(NoStringEvaluating.NoStringEvaluator.Facade)">
            <summary>
            Facade
            </summary>
        </member>
        <member name="P:NoStringEvaluating.NoStringEvaluatorNullable.Facade.Evaluator">
            <summary>
            Evaluator
            </summary>
        </member>
        <member name="P:NoStringEvaluating.NoStringEvaluatorNullable.Facade.FunctionReader">
            <summary>
            FunctionReader
            </summary>
        </member>
        <member name="P:NoStringEvaluating.NoStringEvaluatorNullable.Facade.FormulaParser">
            <summary>
            FormulaParser
            </summary>
        </member>
        <member name="P:NoStringEvaluating.NoStringEvaluatorNullable.Facade.FormulaCache">
            <summary>
            FormulaCache
            </summary>
        </member>
        <member name="P:NoStringEvaluating.NoStringEvaluatorNullable.Facade.FormulaChecker">
            <summary>
            FormulaChecker
            </summary>
        </member>
        <member name="T:NoStringEvaluating.NoStringEvaluatorOptions">
            <summary>
            Options
            </summary>
        </member>
        <member name="P:NoStringEvaluating.NoStringEvaluatorOptions.FloatingTolerance">
            <summary>
            Floating tolerance for understanding Zero number
            </summary>
        </member>
        <member name="P:NoStringEvaluating.NoStringEvaluatorOptions.FloatingPointSymbol">
            <summary>
            Symbol of floating point
            </summary>
        </member>
        <member name="P:NoStringEvaluating.NoStringEvaluatorOptions.WordQuotationMark">
            <summary>
            Quotation mark
            </summary>
        </member>
        <member name="P:NoStringEvaluating.NoStringEvaluatorOptions.ThrowIfVariableNotFound">
            <summary>
            If set true - throws exception when variable not found, if set false - returns Null
            </summary>
        </member>
        <member name="P:NoStringEvaluating.NoStringEvaluatorOptions.IsWithoutDefaultFunctions">
            <summary>
            Don't register default functions
            </summary>
        </member>
        <member name="P:NoStringEvaluating.NoStringEvaluatorOptions.FunctionsAssemblies">
            <summary>
            Assemblies with functions
            </summary>
        </member>
        <member name="P:NoStringEvaluating.NoStringEvaluatorOptions.Functions">
            <summary>
            Functions
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorOptions.#ctor">
            <summary>
            Options
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorOptions.SetWordQuotationSingleQuote">
            <summary>
            Set word quotation mark - '
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorOptions.SetWordQuotationDoubleQuote">
            <summary>
            Set word quotation mark - "
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorOptions.SetWordQuotationMark(System.String)">
            <summary>
            Set word quotation mark
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorOptions.SetFloatingTolerance(System.Double)">
            <summary>
            Set floating tolerance
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorOptions.SetFloatingPointSymbol(NoStringEvaluating.Models.FloatingPointSymbol)">
            <summary>
            Set floating point symbol
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorOptions.SetThrowIfVariableNotFound(System.Boolean)">
            <summary>
            Set throw if variable not found
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorOptions.WithFunctionsFrom(System.Type)">
            <summary>
            Add assembly to register functions
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorOptions.WithFunctionsFrom(System.Reflection.Assembly)">
            <summary>
            Add assembly to register functions
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorOptions.WithoutDefaultFunctions(System.Boolean)">
            <summary>
            Remove root assembly from functions registration
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorOptions.WithFunctions(NoStringEvaluating.Functions.Base.IFunction[])">
            <summary>
            Add functions
            </summary>
        </member>
        <member name="M:NoStringEvaluating.NoStringEvaluatorOptions.UpdateGlobalOptions">
            <summary>
            Update global constants <see cref="T:NoStringEvaluating.GlobalOptions"/>
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.BorderCounter`1">
            <summary>
            Border counter
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Services.BorderCounter`1.Count">
            <summary>
            Border count
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.BorderCounter`1.#ctor(System.Func{`0,System.Boolean})">
            <summary>
            Border counter
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.BorderCounter`1.Proceed(`0)">
            <summary>
            Proceed border
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.BracketCounters">
            <summary>
            Contains bracket counters
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.BracketCounters.#ctor">
            <summary>
            Contains bracket counters
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.BracketCounters.CreateNewCounter">
            <summary>
            Create new counter
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.BracketCounters.Proceed(NoStringEvaluating.Nodes.BracketNode)">
            <summary>
            Return true, if bracket area is closed
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.Cache.FormulaCache">
            <summary>
            Parsed formula cache
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Cache.FormulaCache.#ctor(NoStringEvaluating.Contract.IFormulaParser)">
            <summary>
            Parsed formula cache
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Cache.FormulaCache.GetFormulaNodes(System.String)">
            <summary>
            Return cached formula nodes
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.Checking.FormulaChecker">
            <summary>
            Syntax checker
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Checking.FormulaChecker.#ctor(NoStringEvaluating.Contract.IFormulaParser)">
            <summary>
            Syntax checker
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Checking.FormulaChecker.CheckSyntax(System.String)">
            <summary>
            Check syntax
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Checking.FormulaChecker.CheckSyntax(System.ReadOnlySpan{System.Char})">
            <summary>
            Check syntax
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.IndexWatcher">
            <summary>
            Word index tracker
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Services.IndexWatcher.StartIndex">
            <summary>
            Start word index
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Services.IndexWatcher.Length">
            <summary>
            Word length
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Services.IndexWatcher.InProcess">
            <summary>
            Has start index
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.IndexWatcher.Remember(System.Int32)">
            <summary>
            Remember index
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.NameBuilder">
            <summary>
            Name builder
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Services.NameBuilder.ExpectedName">
            <summary>
            Expected name
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Services.NameBuilder.Length">
            <summary>
            Length
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Services.NameBuilder.IsFinished">
            <summary>
            Is finished
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.NameBuilder.#ctor(System.String)">
            <summary>
            Name builder
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.NameBuilder.TryRemember(System.Char)">
            <summary>
            Try remembed char
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.NameBuilder.Reset(System.String)">
            <summary>
            Reset name
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.Parsing.FormulaParser">
            <summary>
            Parser from string to object sequence
            </summary>
        </member>
        <member name="P:NoStringEvaluating.Services.Parsing.FormulaParser.FunctionsReader">
            <summary>
            Function reader
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.FormulaParser.#ctor(NoStringEvaluating.Contract.IFunctionReader)">
            <summary>
            Parser from string to object sequence
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.FormulaParser.Parse(System.String)">
            <summary>
            Return parsed formula nodes
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.FormulaParser.Parse(System.ReadOnlySpan{System.Char})">
            <summary>
            Return parsed formula nodes
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.FormulaParser.ParseWithoutRpn(System.ReadOnlySpan{System.Char})">
            <summary>
            Return parsed formula nodes without RPN
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.Parsing.NodeReaders.BracketReader">
            <summary>
            Bracket reader
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.BracketReader.TryProceedOpenBracket(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.BaseFormulaNode},System.ReadOnlySpan{System.Char},NoStringEvaluating.Services.BracketCounters,System.Int32@)">
            <summary>
            Read open bracket
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.BracketReader.TryProceedCloseBracket(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.BaseFormulaNode},System.ReadOnlySpan{System.Char},NoStringEvaluating.Services.BracketCounters,System.Int32@)">
            <summary>
            Read close bracket
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.Parsing.NodeReaders.FunctionCharReader">
            <summary>
            Read function's char
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.FunctionCharReader.TryProceedFunctionChar(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.BaseFormulaNode},System.Char)">
            <summary>
            Read function's char
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.Parsing.NodeReaders.FunctionReader">
            <summary>
            Function reader
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.FunctionReader.#ctor">
            <summary>
            Function reader
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.FunctionReader.AddFunction(NoStringEvaluating.Functions.Base.IFunction,System.Boolean)">
            <summary>
            Add function
            </summary>
            <exception cref="T:NoStringEvaluating.Exceptions.NoStringFunctionException">if exists</exception>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.FunctionReader.RemoveFunction(System.String)">
            <summary>
            Remove function
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.FunctionReader.TryProceedFunction(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.BaseFormulaNode},System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Read function name
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.Parsing.NodeReaders.ListReader">
            <summary>
            List reader
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.ListReader.TryProceedList(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.BaseFormulaNode},System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Read list
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.Parsing.NodeReaders.NegationReader">
            <summary>
            Negation Reader
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.NegationReader.ReadNegation(System.ReadOnlySpan{System.Char},System.Int32,System.Boolean@)">
            <summary>
            Read negation
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.Parsing.NodeReaders.NumberReader">
            <summary>
            Number reader
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.NumberReader.TryProceedNumber(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.BaseFormulaNode},System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Read number
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.Parsing.NodeReaders.OperatorReader">
            <summary>
            Operator reader
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.OperatorReader.TryProceedOperator(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.BaseFormulaNode},System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Read operator
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.Parsing.NodeReaders.UnaryMinusReader">
            <summary>
            Reader for unary minus
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.UnaryMinusReader.ReadUnaryMinus(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.BaseFormulaNode},System.ReadOnlySpan{System.Char},System.Int32,System.Boolean@)">
            <summary>
            Read unary minus and return next index
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.UnaryMinusReader.TryProceedUnaryMinus(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.BaseFormulaNode},System.Char,System.Boolean@)">
            <summary>
            Read unary minus
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.Parsing.NodeReaders.VariableReader">
            <summary>
            Variable reader
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.VariableReader.TryProceedBorderedVariable(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.BaseFormulaNode},System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Read variable
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.VariableReader.TryProceedSimpleVariable(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.BaseFormulaNode},System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Read variable
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.Parsing.NodeReaders.WordReader">
            <summary>
            Word reader
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.NodeReaders.WordReader.TryProceedWord(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.BaseFormulaNode},System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Read word
            </summary>
        </member>
        <member name="T:NoStringEvaluating.Services.Parsing.PolishNotationService">
            <summary>
            Reverse Polish notation
            </summary>
        </member>
        <member name="M:NoStringEvaluating.Services.Parsing.PolishNotationService.GetReversedNodes(System.Collections.Generic.List{NoStringEvaluating.Nodes.Base.BaseFormulaNode})">
            <summary>
            Return reversed nodes
            </summary>
        </member>
    </members>
</doc>
